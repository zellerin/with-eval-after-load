* Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:
****** [in package WITH-EVAL-AFTER-LOAD]
:PROPERTIES:
:CUSTOM_ID: in-package-with-eval-after-load
:END:
Emacs provides at least two ways (customization and eval-after-load) for
user how to customize a package without actually loading it. I am not
aware of anything like that in Common Lisp.

This package imitates the with-eval-after-load macro.

** 1 Quick start example
:PROPERTIES:
:CUSTOM_ID: quick-start-example
:END:
Drakma by default considers Javascript to be a binary format. I want it
to handle it as text. This can be done by setting
=DRAKMA:*TEXT-CONTENT-TYPES*= appropriately.

So I have this in my ~/.sbclrc:

#+begin_src lisp
(with-eval-after-load ("drakma" drakma)
  (setf #:*text-content-types*
        (list '("application" . "javascript") '("application" . "json") '("text" . nil))))
#+end_src

It does not load Drakma and its dependencies, but it makes sure that
when Drakma is loaded eventually, it will have it set. Note that as
DRAKMA package does not exist yet, I cannot use it to name a symbol - so
the package name as a parameter and #: in the setf.

The package also provides an autoload feature that is kind of
experimental.

** 2 Dictionary
:PROPERTIES:
:CUSTOM_ID: dictionary
:END:

- [macro] *WITH-EVAL-AFTER-LOAD* /(ASDF-SYSTEM PACKAGE &KEY AUTOLOAD)
  &BODY BODY/

  Set up modified =BODY= to be evaluated (using
  [[http://www.lispworks.com/documentation/HyperSpec/Body/f_eval.htm][=EVAL=]])
  either immediately (if the =ASDF-SYSTEM= is already loaded), or when
  it is loaded in future.

  Each occurence of uninterned symbol (that is, symbol prefixed with #:)
  in =BODY= is replaced by symbol of same name in the =PACKAGE= before
  evaluation.

  Symbols from =AUTOLOAD= list are then imported to the
  [[#x-28WITH-EVAL-AFTER-LOAD-3A-2AROOT-PACKAGE-2A-20VARIABLE-29][=*ROOT-PACKAGE*=]].

  In addition, for each symbol in the =AUTOLOAD= list (also uninterned)
  there is a function defined in =*ROOT-PACKAGE*= that loads the
  =ASDF-SYSTEM= (this implicitly replaces the function binding) and then
  calls the newly defined function on same parameters.

- [variable] **ROOT-PACKAGE** /"CL-USER"/

  Package to which are the function autoloaded. This is by default
  CL-USER as reasonable baseline. I create and use custom package, but
  the name depends on circumstances.

- [macro] *DEFINE-AUTOLOAD* /NAME SOURCE-SYSTEM/

  Define a function =NAME= that when called loads =SOURCE-SYSTEM= and
  then calls itself again, expecting to be changed.

  This is used internally by
  [[#x-28WITH-EVAL-AFTER-LOAD-3AWITH-EVAL-AFTER-LOAD-20MGL-PAX-3AMACRO-29][=WITH-EVAL-AFTER-LOAD=]],
  but can be used independently as well if you handle package creation
  in a different way.

** 3 Known bugs
:PROPERTIES:
:CUSTOM_ID: known-bugs
:END:
This is in "good-enough-for-me" state.

It abuses =ASDF:PERFORM= =:AFTER= method. If some system uses it, things
may break. That said, I did not see it defined on the systems I use.

--------------

****** [generated by [[https://github.com/melisgl/mgl-pax][MGL-PAX]]]
:PROPERTIES:
:CUSTOM_ID: generated-by-mgl-pax
:END:
